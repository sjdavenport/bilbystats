import openai
import pandas as pd

def read_api_key(api_key_name="openai", key_dir="/Users/samd/Documents/Packages/othercode/api_keys/"):
    """
    Read an API key from a specified file.

    This function reads an API key from a text file located in the provided 
    directory. The file is expected to be named using the format 
    '{api_key_name}_api_key.txt'. The contents of the file are stripped of 
    leading and trailing whitespace before being returned.

    ---------------------------------------------------------------------------
    ARGUMENTS:
    api_key_name : str, optional (default="openai")
        The base name of the API key file (without the '_api_key.txt' suffix).
    key_dir : str, optional (default="/Users/samd/Documents/Packages/othercode/api_keys/")
        The directory where the API key file is stored.

    ---------------------------------------------------------------------------
    OUTPUT:
    api_key : str
        The API key read from the specified file.

    ---------------------------------------------------------------------------
    AUTHORS: Samuel Davenport
    ---------------------------------------------------------------------------
    """
    filename = key_dir + api_key_name + "_api_key.txt"
    api_key = open(filename).read().strip()
    return api_key


def openai_api(instructions, content, model_name="gpt-4o"):
    """
    Call the OpenAI API with custom instructions and content.

    This function sends a request to the OpenAI API using the specified model, 
    along with provided instructions and user content. It retrieves and returns 
    the response content generated by the model.

    ---------------------------------------------------------------------------
    ARGUMENTS:
    instructions : str
        The system or developer-level instructions that guide the model's behavior.
    content : str
        The main user-provided content or prompt to process.
    model_name : str, optional (default="gpt-4o")
        The name of the OpenAI model to use for generating the completion.

    ---------------------------------------------------------------------------
    OUTPUT:
    output : str
        The generated response content from the OpenAI API.

    ---------------------------------------------------------------------------
    AUTHORS: Samuel Davenport
    ---------------------------------------------------------------------------
    """
    openai.api_key = read_api_key("openai")

    # Now you can use the OpenAI client
    client = openai

    completion = client.chat.completions.create(
        model=model_name,
        messages=[
            {"role": "developer",
                "content": instructions},
            {
                "role": "user",
                "content": content
            }
        ]
    )
    reponse = completion.choices[0].message
    output = reponse.content
    return output


def translate(text, model_name="gpt-4o"):
    """
    Translate Chinese text to English using a specified language model.

    This function uses the OpenAI API to translate a given Chinese text into 
    English. It sends translation instructions and the input text to the 
    specified language model and returns only the translated result.

    ---------------------------------------------------------------------------
    ARGUMENTS:
    text : str
        The Chinese text to be translated.
    model_name : str, optional (default="gpt-4o")
        The name of the OpenAI model used for translation.

    ---------------------------------------------------------------------------
    OUTPUT:
    translation : str
        The English translation of the input text.

    ---------------------------------------------------------------------------
    AUTHORS: Samuel Davenport
    ---------------------------------------------------------------------------
    """
    instructions = "You are an expert in translation of Chinese texts."
    content = "For the following text return its translation to English and just that: " + text
    translation = openai_api(instructions, content, model_name=model_name)
    return translation


def sentiment_detector(text, model_name="gpt-4o"):
    """
    Detect the sentiment of a given text using a specified language model.

    This function uses the OpenAI API to analyze the sentiment of the provided 
    text. It classifies the sentiment as 'positive', 'neutral', or 'negative', 
    and returns only the sentiment label.

    ---------------------------------------------------------------------------
    ARGUMENTS:
    text : str
        The text for which sentiment analysis is to be performed.
    model_name : str, optional (default="gpt-4o")
        The name of the OpenAI model used for sentiment analysis.

    ---------------------------------------------------------------------------
    OUTPUT:
    sentiment : str
        The sentiment classification of the input text ('positive', 
        'neutral', or 'negative').

    ---------------------------------------------------------------------------
    AUTHORS: Samuel Davenport
    ---------------------------------------------------------------------------
    """
    instructions = "You are an expert in sentiment analysis."
    content = "For the following text return positive/neutral/negative depending on the sentiment of the text. Just give the sentiment as an answer. Text: "
    content = content + text
    sentiment = openai_api(instructions, content, model_name=model_name)
    return sentiment